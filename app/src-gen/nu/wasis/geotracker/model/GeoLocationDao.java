package nu.wasis.geotracker.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import nu.wasis.geotracker.model.GeoLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GEO_LOCATION.
*/
public class GeoLocationDao extends AbstractDao<GeoLocation, Long> {

    public static final String TABLENAME = "GEO_LOCATION";

    /**
     * Properties of entity GeoLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Latitude = new Property(1, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Altitude = new Property(3, Double.class, "altitude", false, "ALTITUDE");
        public final static Property Accuracy = new Property(4, Float.class, "accuracy", false, "ACCURACY");
        public final static Property Speed = new Property(5, Float.class, "speed", false, "SPEED");
        public final static Property Time = new Property(6, Long.class, "time", false, "TIME");
    };


    public GeoLocationDao(DaoConfig config) {
        super(config);
    }
    
    public GeoLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GEO_LOCATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LATITUDE' REAL NOT NULL ," + // 1: latitude
                "'LONGITUDE' REAL NOT NULL ," + // 2: longitude
                "'ALTITUDE' REAL," + // 3: altitude
                "'ACCURACY' REAL," + // 4: accuracy
                "'SPEED' REAL," + // 5: speed
                "'TIME' INTEGER);"); // 6: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GEO_LOCATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GeoLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getLatitude());
        stmt.bindDouble(3, entity.getLongitude());
 
        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(4, altitude);
        }
 
        Float accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindDouble(5, accuracy);
        }
 
        Float speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(6, speed);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(7, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GeoLocation readEntity(Cursor cursor, int offset) {
        GeoLocation entity = new GeoLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // latitude
            cursor.getDouble(offset + 2), // longitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // altitude
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // accuracy
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // speed
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GeoLocation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitude(cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setAltitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setAccuracy(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setSpeed(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GeoLocation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GeoLocation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
